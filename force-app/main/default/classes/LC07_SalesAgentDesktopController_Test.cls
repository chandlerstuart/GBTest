/**
Name:  LC07_SalesAgentDesktopController_Test.cls
Copyright Â© 2016  GolfBreaks
======================================================
======================================================
Purpose:
-------
Test Class for LC07_SalesAgentDesktopController
======================================================
======================================================
History
------- 
Ver. Author        Date         Detail
1.0  S.Molloy     2016-12-06   Initial test class development
**/
@isTest
private class LC07_SalesAgentDesktopController_Test {
    @testSetup static void SalesAgentDesktopSetUp() {
        OrgSettings__c orgSettings = new OrgSettings__c(TriggersActive__c = TRUE);
        insert orgSettings; 
        
        List<Object_Field_Mapping__c> allOFMList = new List<Object_Field_Mapping__c>();
        List<Object_Field_Mapping__c> leadOFM = AP23_TestDataFactory.createObjectFieldMappingsByObject('LEAD');
        List<Object_Field_Mapping__c> caseOFM = AP23_TestDataFactory.createObjectFieldMappingsByObject('CASE');
        List<Object_Field_Mapping__c> oppOFM = AP23_TestDataFactory.createObjectFieldMappingsByObject('OPPORTUNITY');
        List<Object_Field_Mapping__c> taskOFM = AP23_TestDataFactory.createObjectFieldMappingsByObject('TASK');

        allOFMList.addAll(leadOFM);
        allOFMList.addAll(caseOFM);
        allOFMList.addAll(oppOFM);
        allOFMList.addAll(taskOFM);

        insert allOFMList;


        // Leads
        List<Leads_Today__c> csTodayLeads = new List<Leads_Today__c>();
        csTodayLeads.add(new Leads_Today__c(Name = '1' ,Label__c = 'My New Leads' , List_View_Name__c = 'My New Leads'));
        csTodayLeads.add(new Leads_Today__c(Name = '2' ,Label__c = 'My Diarised Leads' , List_View_Name__c = 'My Diarised Leads Today'));
        insert csTodayLeads;

        

        // Opportunities
        List<Opportunities_Today__c> csTodayOpportunities = new List<Opportunities_Today__c>();
        csTodayOpportunities.add(new Opportunities_Today__c(Name = '1' ,Label__c = 'Diarised Recommendations' , List_View_Name__c = 'My Opportunities Recommendation Today'));
        csTodayOpportunities.add(new Opportunities_Today__c(Name = '2' ,Label__c = 'Diarised Quote Sent' , List_View_Name__c = 'My Opportunities(Quote Sent) Today'));
        csTodayOpportunities.add(new Opportunities_Today__c(Name = '3' ,Label__c = 'Diarised Close Sale' , List_View_Name__c = 'My Opportunities(Close Sale) Today'));
        csTodayOpportunities.add(new Opportunities_Today__c(Name = '4' ,Label__c = 'Diarised Customer Accepted' , List_View_Name__c = 'Customer Accepted Today'));
        insert csTodayOpportunities;


        // Cases
        List<Cases_Today__c> csTodayCases = new List<Cases_Today__c>();
        csTodayCases.add(new Cases_Today__c(Name = '1' ,Label__c = 'My New Cases (Bookings)' , List_View_Name__c = 'My New Cases (Bookings)'));
        csTodayCases.add(new Cases_Today__c(Name = '2' ,Label__c = 'My Open Cases (Bookings)' , List_View_Name__c = 'My Open Cases(Bookings) Today_CS'));
        insert csTodayCases;

       
        // Tasks
        List<Tasks_Today__c> csTodayTasks = new List<Tasks_Today__c>();
        csTodayTasks.add(new Tasks_Today__c(Name = '1' ,Label__c = 'My Call Backs' , List_View_Name__c = 'My Call Backs (Today)', List_View_Id__c = '00B7E000000WYRd' , Task_Query__c = 'SELECT COUNT() FROM Event WHERE StartDateTime <= TODAY AND OwnerId =:currentUserId'));
        insert csTodayTasks;

        Account acct = new Account(Name = 'My Test Account');
        insert acct; 

        Booking__c bkg = new Booking__c();
        bkg.Account__c = acct.Id;
        insert bkg;


    }

    @IsTest static void testLists(){
        List<String> leadStatusExcludeList = LC07_SalesAgentDesktopController.leadStatusExcludeList;
        system.assertNotEquals(null, leadStatusExcludeList);
        List<String> oppIncludeList = LC07_SalesAgentDesktopController.oppIncludeList;
        system.assertNotEquals(null, oppIncludeList);
        List<String> caseRTIncludeList = LC07_SalesAgentDesktopController.caseRTIncludeList;
        system.assertNotEquals(null, caseRTIncludeList);

        String leadString = LC07_SalesAgentDesktopController.buildStringFromList(leadStatusExcludeList);
        String oppString = LC07_SalesAgentDesktopController.buildStringFromList(oppIncludeList);
        String caseString = LC07_SalesAgentDesktopController.buildStringFromList(caseRTIncludeList);

        system.assertNotEquals(null, leadString);
        system.assertNotEquals(null, oppString);
        system.assertNotEquals(null, caseString);

        List<String> leadHeaders = LC07_SalesAgentDesktopController.getColumnHeaders('Lead','');
        List<String> oppHeaders = LC07_SalesAgentDesktopController.getColumnHeaders('Opportunity','');
        List<String> leadOppCaseHeaders = LC07_SalesAgentDesktopController.getColumnHeaders('Case','LEADOPP');
        List<String> bookingCaseHeaders = LC07_SalesAgentDesktopController.getColumnHeaders('Case','BOOKING');

        system.assertNotEquals(null, leadHeaders);
        system.assertNotEquals(null, oppHeaders);
        system.assertNotEquals(null, leadOppCaseHeaders);        
        system.assertNotEquals(null, bookingCaseHeaders);        

        List<Date> dateList = LC07_SalesAgentDesktopController.getCurrentDateList();
        User currentUser = LC07_SalesAgentDesktopController.getCurrentUser();

        system.assertNotEquals(null, dateList);
        system.assertNotEquals(null, currentUser);

    }

    private static String returnFilterDate(Date inDate){
        integer y = inDate.year();
        integer m = inDate.month();
        integer d = inDate.day();

        String strY = (y.format()).replace(',','');
        String strM = ('0' + m.format()).right(2);
        String strD = ('0' + d.format()).right(2);

        return strY + '-' + strM + '-' + strD;
    }

    @isTest static void testGetLeadRecords() {
        String filterDate = returnFilterDate(Date.today());
        Test.startTest();
        LC07_SalesAgentDesktopController_Test.createLead(true, null, 'Today');
        List<ListViewWrapper> todayList = LC07_SalesAgentDesktopController.returnLeadRecords(filterDate); 
        Test.stopTest();
    }
    
    @isTest static void testGetReportForOpportunities() {
        String filterDate = returnFilterDate(Date.today());
        Test.startTest();
        Date today = Date.today();
        LC07_SalesAgentDesktopController_Test.createOpportunity('Recommendations', '1. Recommendations', today);
        LC07_SalesAgentDesktopController_Test.createOpportunity('QuoteSent', '2. Quote Sent', today);
        LC07_SalesAgentDesktopController_Test.createOpportunity('CloseSale', '3. Close Sale', today);
        LC07_SalesAgentDesktopController_Test.createOpportunity('CustomerAccepted', '4. Customer Accepted', today);
        LC07_SalesAgentDesktopController_Test.createOpportunity('Recommendations', '1. Recommendations', today.addDays(-1));
        LC07_SalesAgentDesktopController_Test.createOpportunity('QuoteSent', '2. Quote Sent', today.addDays(-1));
        LC07_SalesAgentDesktopController_Test.createOpportunity('CloseSale', '3. Close Sale', today.addDays(-1));
        LC07_SalesAgentDesktopController_Test.createOpportunity('CustomerAccepted', '4. Customer Accepted', today.addDays(-1));
        
        List<ListViewWrapper> todayList = LC07_SalesAgentDesktopController.returnOppRecords(filterDate);
        
        try {
        System.assertEquals('Diarised Recommendations' , todayList[0].label);
        System.assertEquals('Diarised Quote Sent', todayList[1].label);
        System.assertEquals('Diarised Closed Sale' , todayList[2].label);
        System.assertEquals('Diarised Customer Accepted', todayList[3].label);        
        System.assertEquals(2, todayList[0].recordCount);
        System.assertEquals(2 , todayList[1].recordCount);  
        System.assertEquals(2 , todayList[2].recordCount);
        System.assertEquals(2 , todayList[3].recordCount);  
        } catch( Exception e) {
            System.debug('Exception: ' + String.ValueOf(e));
        }
        Test.stopTest();
    }

    @isTest static void testGetReportForCasesToday() {
        String filterDate = returnFilterDate(Date.today());
        Test.startTest();
        LC07_SalesAgentDesktopController_Test.createServiceCase(Datetime.now()); 
        LC07_SalesAgentDesktopController_Test.createServiceCase(Datetime.now().addDays(-1)); 

        LC07_SalesAgentDesktopController_Test.createSalesCase(Datetime.now()); 
        LC07_SalesAgentDesktopController_Test.createSalesCase(Datetime.now().addDays(-1)); 

        List<ListViewWrapper> todayList = LC07_SalesAgentDesktopController.returnCaseRecords(filterDate);
        
        try {
        System.assertEquals('Lead / Opportunity Cases' , todayList[0].label);
        System.assertEquals(2 , todayList[0].recordCount);
        } catch( Exception e) {
            System.debug('Exception: ' + String.ValueOf(e));
        }
        Test.stopTest();
    }

    /*
    @isTest static void testGetReportForTasks() {
        Test.startTest();
        LC07_SalesAgentDesktopController_Test.createEvent(Datetime.now(), Datetime.now().addDays(1), 'Today');
        LC07_SalesAgentDesktopController_Test.createEvent(Datetime.now().addDays(1), Datetime.now().addDays(2), 'This Week');
        LC07_SalesAgentDesktopController_Test.createEvent(Datetime.now().addDays(8), Datetime.now().addDays(9), 'Total');
        List<ListViewWrapper> todayList = LC07_SalesAgentDesktopController.getTodayReportTasks();
        List<ListViewWrapper> thisWeekList = LC07_SalesAgentDesktopController.getThisWeekReportTasks();
        List<ListViewWrapper> totalList = LC07_SalesAgentDesktopController.getTotalReportTasks();
        try {
        System.assertEquals('My Call Backs', todayList[0].label);
        } catch( Exception e) {
            System.debug('Exception: ' + String.ValueOf(e));
        }
        Test.stopTest();        
    }
    */
    private static void createLead(Boolean isNew, Date diaryDate, String lastName){
        Lead newLead = new Lead();
        newLead.OwnerId = UserInfo.getUserId();
        newLead.LastName = lastName;
        newLead.LeadSource = 'Website form';
        newLead.Phone = '+631234568';
        newLead.HomePhone__c = '+631234568';
        newLead.MobilePhone = '+631234568';
        newLead.Email = lastName + '@myemail.com';

        if(isNew){
            newLead.Status = 'New';
        }else{
            newLead.Status = 'Contact Attempted';
            newLead.Diarydate__c = diaryDate;
        }
        insert newLead;
        ObjectWrapper ow = new ObjectWrapper();
        ow.fieldLabel = Lead.LastName.getDescribe().getLabel();
        ow.fieldName = Lead.LastName.getDescribe().getName();
        resetHandler();
    }

    private static void createOpportunity(String oppName, String stageName, Date diaryDate){
        Opportunity opp = new Opportunity();
        Id rectypeId = ApplicationConstant.OPP_RECTYPEID_NSO;
        Date today = Date.today();
        opp.RecordTypeId = rectypeId;
        opp.CloseDate = today;
        opp.OwnerId = UserInfo.getUserId();
        opp.Name = oppName;
        opp.StageName = stageName;  
        opp.DiaryDate__c = diaryDate;
        insert opp;
    }

    private static void createServiceCase(Datetime requestCallBackDateTime ){

        Booking__c bkg = [SELECT Id FROM Booking__c LIMIT 1];
        BusinessHours bh = [SELECT Id FROM BusinessHours WHERE IsDefault=true];
        Case cse = new Case();
        Id rectypeId = ApplicationConstant.CASERECTYPEID_SERVICECASE;
        //Date today = Date.today();
        cse.RecordTypeId = rectypeId;
        cse.Booking__c = bkg.Id;
        cse.Type = 'Feedback';
        cse.Category__c = 'F- On Site';
        cse.SubCategory__c = 'Positive';    
        cse.Origin = 'Email';
        cse.Status = 'New';
        cse.Complaint_Source__c = 'Client';
        cse.Complaint_Liability__c = 'Supplier';
        cse.BusinessHours = bh;
        cse.RequestedCallBackDateAndTime__c = requestCallBackDateTime;
        cse.DiaryDate__c = Date.newInstance(requestCallBackDateTime.year(), requestCallBackDateTime.month(), requestCallBackDateTime.day());
        insert cse;
    }
    
    private static void createSalesCase(Datetime requestCallBackDateTime ){

        Booking__c bkg = [SELECT Id FROM Booking__c LIMIT 1];
        BusinessHours bh = [SELECT Id FROM BusinessHours WHERE IsDefault=true];
        Case cse = new Case();
        Id rectypeId = [select Id from RecordType where SObjectType = 'Case' and Name ='Sales Case' LIMIT 1].Id;
        //Date today = Date.today();
        cse.RecordTypeId = rectypeId;
        cse.Booking__c = bkg.Id;
        cse.Type = 'Feedback';
        cse.Category__c = 'F- On Site';
        cse.SubCategory__c = 'Positive';    
        cse.Origin = 'Email';
        cse.Status = 'New';
        cse.Complaint_Source__c = 'Client';
        cse.Complaint_Liability__c = 'Supplier';
        cse.BusinessHours = bh;
        cse.RequestedCallBackDateAndTime__c = requestCallBackDateTime;
        cse.DiaryDate__c = Date.newInstance(requestCallBackDateTime.year(), requestCallBackDateTime.month(), requestCallBackDateTime.day());
        insert cse;
    }

    private static void createEvent(Datetime startDate, Datetime endDate, String taskSubject){
        Event evnt = new Event(StartDateTime = startDate, EndDateTime = endDate, Subject = taskSubject, OwnerId = UserInfo.getUserId() );
        insert evnt;
    }

    private static void resetHandler(){
        AP04_LeadTriggerBL.firstRun = true;
        AP04_LeadTriggerBL.comesFromInsert = false;
        AP04_LeadTriggerBL.isBeforeUpdateTriggerCalled = FALSE;
        AP04_LeadTriggerBL.isBeforeInsertTriggerCalled = FALSE;
        AP04_LeadTriggerBL.isAfterUpdateTriggerCalled = FALSE;
        AP04_LeadTriggerBL.isAfterInsertTriggerCalled = FALSE;
    }
}