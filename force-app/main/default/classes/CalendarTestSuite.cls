/*
Name:  CalendarTestSuite.cls
Copyright © 2014  Kaptio
======================================================
======================================================
Purpose:
-------
Suite of unit tests that exercise (and verify) all Calendar class and helpers

Future enhancements:

======================================================
======================================================
History
------- 
Ver. Author                               Date                Detail
1.0  Örn Ingvar Ásbjörnsson     2014-07-23    Initial development.
1.1  Örn Ingvar Ásbjörnsson     2014-07-24    More Tests and Asserts
1.2  J Radcliffe                2020-01-23    Tests for getAgentsPublicHolidayBetweenDates method in the CalendarHelper Class
1.3  J Radcliffe                2020-01-23    Tests method testSmartCalendarHelperPublicHoliday - Verifying Public Holiday is accurately retrieved and reflected on the page according to the wrapper data
1.4  J Radcliffe                2020-01-30    New test method to test 'getMonthInteger' method and increase test coverage
*/
@isTest
private class CalendarTestSuite {

    @isTest static void testSmartCalendarHelper() {
        User thisUser = [SELECT Id FROM User WHERE Id = :UserInfo.getUserId()];
       
        System.runAs (thisUser) {
            //Create a user to work with
            User u = UserTestHelper.createStandardUsers(1, 'Flash', 'Gordon')[0];
            System.debug('=== user: ' + u);
            //Create an employee leave year record
            EmployeeLeaveYear__c employeeLeaveYear = CalendarTestHelper.createEmployeeLeaveYear(u);

            // Instance the SmartCalendarHelper class
            SmartCalendarHelper wrapper 
                = new SmartCalendarHelper( 2014, 08, CalendarTestHelper.createUserLeaveWrapper(u), 
                        new List<EmployeeLeaveYear__c>{ employeeLeaveYear } );
            System.debug('=== wrapper: ' + wrapper);
            System.debug('=== wrapper.row: ' + wrapper.rows[0].data[0]);

            //Assert the CalendarFilter created by SmartCalendarHelper constructor
            System.assertEquals('2013', wrapper.filter.prevYear);
            System.assertEquals('2015', wrapper.filter.nextYear);
            System.assertEquals(12, wrapper.filter.months.size());

            //Assert the CalendarHeader created by SmartCalendarHelper constructor
            System.assertEquals(31, wrapper.header.headerDays.size());
            System.assertEquals('F', wrapper.header.headerDays[0].weekDay);
            System.assertEquals(1, wrapper.header.headerDays[0].dateNo);

            //Assert the integer date fields set by SmartCalendarHelper constructor
            System.assertEquals(2014, wrapper.currentYear);
            System.assertEquals(08, wrapper.currentMonth);
            System.assertEquals('August', wrapper.currentMonthName);

            //Assert CalendarTableRows created by SmartCalendarHelper constructor
            System.assertEquals(u, wrapper.rows[0].employee);
            System.assert( wrapper.rows[0].rowClass.contains('userRow'), 'Class should contain "userRow"');
            System.assert( wrapper.rows[0].rowClass.contains('hasLeave'), 'Class should contain "hasLeave"');
            System.assert( wrapper.rows[0].rowClass.contains('approved'), 'Class should contain "approved"');
            System.assertEquals(employeeLeaveYear.Id, wrapper.rows[0].leaveYearId);

            //Assert the CalendarTableData generated by the CalendarTableRows constructor
            System.assert(wrapper.rows[0].data[0].dateClass.contains('workday'), 'Class should contain "workday"');
            System.assert(wrapper.rows[0].data[0].dateClass.contains('workingPattern'), 'Class should contain "workingPattern"');
            System.assert(wrapper.rows[0].data[0].dateClass.contains('weekday'), 'Class should contain "weekday"');
            System.assertEquals(Date.newInstance(2014, 8, 1), wrapper.rows[0].data[0].dateString);
            //System.assertEquals('Create a new leave Request', wrapper.rows[0].data[0].note);
            //System.assertEquals('New Request', wrapper.rows[0].data[0].title);
            System.assertEquals(false, wrapper.rows[0].data[0].showControls);
            //System.assertEquals(false, wrapper.rows[0].data[0].dayOff);
            //test leaveId in CalendarTableData?
            System.assertEquals('', wrapper.rows[0].data[0].period);
            System.assertEquals(false, wrapper.rows[0].data[0].hasHoliday);
        }
    }

    @isTest static void testCalendarHelper() {
        Date currentDate = Date.newInstance(System.today().year(), System.today().month(), System.today().day());

        //Test firstDateInMonth function
        System.assertEquals(Date.newInstance(2014, 07, 01), CalendarHelper.firstDateInMonth(2014, 07));
        System.assertEquals(currentDate.toStartOfMonth(), calendarHelper.firstDateInMonth());
        System.assertNotEquals(Date.newInstance(2014, 07, 31), CalendarHelper.firstDateInMonth(2014, 07));

        //Test lastDateInMonth
        System.assertEquals(Date.newInstance(2014, 07, 31), calendarHelper.lastDateInMonth(2014, 07));
        System.assertEquals(currentDate.addMonths(1).toStartOfMonth().addDays(-1), calendarHelper.lastDateInMonth());
        System.assertNotEquals(Date.newInstance(2014, 07, 01), CalendarHelper.lastDateInMonth(2014, 07));

        //Test getMonthName
        //NOTE:With no requirements for other languages then english this works but will fail if another language is used in the future
        System.assertEquals('July', calendarHelper.getMonthName(07, 4));
        System.assertNotEquals('July', calendarHelper.getMonthName(01, 4));

        //Test getMonthStringList
        List<String> monthStringList = CalendarHelper.getMonthStringList(01, 03);
        System.assertEquals(monthStringList[0], 'January');
        System.assertEquals(monthStringList.size(), 3);

        List<String> illegalMonthStringList = CalendarHelper.getMonthStringList(12, 02);
        System.assertEquals(illegalMonthStringList.size(), 0);

        //Test getIntegerList
        //System.assertEquals(3, CalendarHelper.getIntegerList(1, 3).size());
        //System.assertEquals(0, CalendarHelper.getIntegerList(3, 1).size());

        //Test getYears
        System.assertEquals(3, CalendarHelper.getYears(Date.newInstance(2013, 01, 01), Date.newInstance(2015, 01, 01)).size() );
        System.assertEquals(2014, CalendarHelper.getYears(Date.newInstance(2014, 01, 01), Date.newInstance(2014, 12, 01))[0] );

        //Test getPublicHolidaysBetweenDates
        Map<Date, List<Holiday>> holidayMap = new Map<Date, List<Holiday>>();
        holidayMap = CalendarHelper.getPublicHolidaysBetweenDates(Date.newInstance(2014, 12, 20), Date.newInstance(2014, 12, 30) );
        if(holidayMap != null) {
            //System.assertEquals(1, holidayMap.get(Date.newInstance(2014, 12, 25)).size());
            System.assertEquals(false, holidayMap.containsKey(Date.newInstance(2014, 12, 20)));
        }

        //TODO: test for two holidays falling on one day
    }

    @isTest static void testCalendarController() {
        User thisUser = [SELECT Id FROM User WHERE Id = :UserInfo.getUserId()];
       
        System.runAs (thisUser) {
            //Create users with leaves to test
            EmployeeLeaveTestHelper.createUsersWithLeaves(10);
            
            //Instance the Visualforce page and load parameters into it
            PageReference currentPage = Page.LeaveCalendar;
            Test.setCurrentPage(currentPage);
            currentPage.getParameters().put('year', '2014');
            currentPage.getParameters().put('month', '08');

            SmartCalendarController controller = new SmartCalendarController();
            //Set the page size to a lower number to be able to test next and prev functions
            controller.userSetController.setPageSize(10);
            System.assertEquals(10, controller.userSetController.getPageSize());

            controller.next();
            controller.prev();
            controller.lastPage();
            controller.firstPage();

            controller.resetFilter();
            controller.getListViewOptions();

            SmartCalendarHelper calWrap = controller.getCalendar();
            System.assertNotEquals(null, calWrap);

            List<User> uList = controller.getUsers();
            System.assertEquals(10, uList.size());
            
            List<EmployeeLeaveYear__c> empLeaveYearList = controller.getUsersLeaveYears();
            System.assertEquals(10, empLeaveYearList.size());

            controller.getUsersLeaves();
        }
    }

    @isTest static void testTeamCalendarController() {
        User thisUser = [SELECT Id FROM User WHERE Id = :UserInfo.getUserId()];
       
        System.runAs (thisUser) {
            //Create users with leaves to test
            EmployeeLeaveTestHelper.createUsersWithLeaves(10);

            //Now test the controller with a different page that gives a team overview
            PageReference currentPage = new PageReference('/apex/MyTeam');
            Test.setCurrentPage(currentPage);
            currentPage.getParameters().put('year', '2014');
            currentPage.getParameters().put('month', '08');

            SmartCalendarController controller = new SmartCalendarController();

            controller.firstPage();
            controller.next();
            controller.prev();
            controller.lastPage();
        }
    }

    //1.2
    //This method that the expected number of Holiday is returned for each group and user based on the specified date range
    @isTest static void getAgentsPublicHolidayBetweenDatesTest(){

        User sysAdmin = AP23_TestDataFactory.createAdminUsers(1,'TestUser',true)[0];

        Date yearStartDate = Date.newInstance(system.today().year(), 1,1);
        Date yearEndDate = Date.newInstance(system.today().year(), 12,31);

        //Create 3 Public Group with 15 Holidays randomly spread accross the year
        List<PublicHolidayGroup__c> publicHolidayGroups = CalendarTestHelper.createPublicHolidayGroupsWithHoliday(3,15,yearStartDate,yearEndDate);
        system.assertEquals(3, publicHolidayGroups.size());
        Map<Id,List<Date>> groupIdsWithHolidayDates = new Map<Id,List<Date>>();
        for(PublicHolidayGroup__c phg: publicHolidayGroups){
            system.assertEquals(15, phg.PublicHolidays__r.size());
            List<Date> holidays = new List<Date>();
            for(PublicHoliday__c ph : phg.PublicHolidays__r){
                holidays.add(ph.Date__c);
            }
            groupIdsWithHolidayDates.put(phg.Id,holidays);
        }

        List<User> users;
        system.runAs(sysAdmin){
            //Create 3 Standard Users
            users = AP23_TestDataFactory.createStandardUsers(3, 'MyTestClient',true);
        }
        system.assertEquals(3, users.size());

        Map<Id,Id> userIdWithPublicGroupId = new Map<Id,Id>();

        //Create Leave Years for each user assigning different public holiday groups
        List<EmployeeLeaveYear__c> leaveYears = new List<EmployeeLeaveYear__c>();
        leaveYears.add(CalendarTestHelper.createEmployeeLeaveYears(new Set<Id>{users[0].Id},yearStartDate,yearEndDate,publicHolidayGroups[0].Id,false)[0]);
        userIdWithPublicGroupId.put(users[0].Id,publicHolidayGroups[0].Id);
        leaveYears.add(CalendarTestHelper.createEmployeeLeaveYears(new Set<Id>{users[1].Id},yearStartDate,yearEndDate,publicHolidayGroups[1].Id,false)[0]);
        userIdWithPublicGroupId.put(users[1].Id,publicHolidayGroups[1].Id);
        leaveYears.add(CalendarTestHelper.createEmployeeLeaveYears(new Set<Id>{users[2].Id},yearStartDate,yearEndDate,publicHolidayGroups[2].Id,false)[0]);
        userIdWithPublicGroupId.put(users[2].Id,publicHolidayGroups[2].Id);
        insert leaveYears;
   
        test.startTest();
            Map<Id,Map<Date, PublicHoliday__c>> userHolidayMap = CalendarHelper.getAgentsPublicHolidayBetweenDates(yearStartDate,yearEndDate,userIdWithPublicGroupId.keySet());
        test.stopTest();

        system.assertEquals(3, userHolidayMap.keySet().size());

        Id groupId;
        for(User u : users){
            system.assertEquals(true, userIdWithPublicGroupId.containsKey(u.Id));
            groupId = userIdWithPublicGroupId.get(u.Id);
            system.assertEquals(userHolidayMap.get(u.Id).keySet().size(),15);
            system.assertEquals(userHolidayMap.get(u.Id).keySet().size(), groupIdsWithHolidayDates.get(groupId).size());
            for(Date d : groupIdsWithHolidayDates.get(groupId)){
                Set<Date> holidays = userHolidayMap.get(u.Id).keySet();
                system.assertEquals(true, holidays.contains(d));
            }
        }
    }

    @isTest static void testSmartCalendarHelperPublicHoliday() {
        User thisUser = [SELECT Id FROM User WHERE Id = :UserInfo.getUserId()];
       
        System.runAs (thisUser) {
            //Create a user to work with
            User u = UserTestHelper.createStandardUsers(1, 'Flash', 'Gordon')[0];
            System.debug('=== user: ' + u);

            //Create Public Holiday Group with Public Holiday for the first day of the month
            Date firstDayOfTheMonth = system.today().toStartOfMonth();
            PublicHolidayGroup__c phg = CalendarTestHelper.createPublicHolidayGroupsWithHoliday(1,1,firstDayOfTheMonth,firstDayOfTheMonth)[0];

            Date startOfcurrentYear = Date.newInstance(system.today().year(),1,1);
            Date endOfcurrentYear = Date.newInstance(system.today().year(),12,31);
            Integer currentYear = system.today().year();
            Integer currentMonth = system.today().month();

            String dayPrefix = DateTime.newInstance(firstDayOfTheMonth.year(),firstDayOfTheMonth.month(),firstDayOfTheMonth.day()).format('EEE').substring(0,1);
            String monthString = DateTime.newInstance(firstDayOfTheMonth.year(),firstDayOfTheMonth.month(),firstDayOfTheMonth.day()).format('MMMMM');

            //Create an employee leave year record for the user and assign them to the new Public Holiday Group
            EmployeeLeaveYear__c employeeLeaveYear = CalendarTestHelper.createEmployeeLeaveYears(new Set<Id>{u.Id}, startOfcurrentYear, endOfcurrentYear, phg.Id, true)[0];

            // Instance the SmartCalendarHelper class
            SmartCalendarHelper wrapper 
                = new SmartCalendarHelper( currentYear, currentMonth, CalendarTestHelper.createUserLeaveWrapper(u), 
                        new List<EmployeeLeaveYear__c>{ employeeLeaveYear } );
            System.debug('=== wrapper: ' + wrapper);
            System.debug('=== wrapper.row: ' + wrapper.rows[0].data[0]);

            //Assert the CalendarFilter created by SmartCalendarHelper constructor
            System.assertEquals(String.valueOf(currentYear-1), wrapper.filter.prevYear);
            System.assertEquals(String.valueOf(currentYear+1), wrapper.filter.nextYear);
            System.assertEquals(12, wrapper.filter.months.size());

            //Assert the CalendarHeader created by SmartCalendarHelper constructor
            System.assertEquals(Date.daysInMonth(system.today().year(), system.today().month()), wrapper.header.headerDays.size());
            System.assertEquals(dayPrefix, wrapper.header.headerDays[0].weekDay);
            System.assertEquals(1, wrapper.header.headerDays[0].dateNo);

            //Assert the integer date fields set by SmartCalendarHelper constructor
            System.assertEquals(currentYear, wrapper.currentYear);
            System.assertEquals(currentMonth, wrapper.currentMonth);
            System.assertEquals(monthString, wrapper.currentMonthName);

            //Assert CalendarTableRows created by SmartCalendarHelper constructor
            System.assertEquals(u, wrapper.rows[0].employee);
            System.assert( wrapper.rows[0].rowClass.contains('userRow'), 'Class should contain "userRow"');
            System.assert( wrapper.rows[0].rowClass.contains('hasLeave'), 'Class should contain "hasLeave"');
            System.assert( wrapper.rows[0].rowClass.contains('approved'), 'Class should contain "approved"');
            System.assertEquals(employeeLeaveYear.Id, wrapper.rows[0].leaveYearId);

            //Assert the CalendarTableData generated by the CalendarTableRows constructor
            String dayType = (dayPrefix=='S')?'weekend':'weekday';
            System.assert(wrapper.rows[0].data[0].dateClass.contains(dayType));
            System.assertEquals(Date.newInstance(firstDayOfTheMonth.year(), firstDayOfTheMonth.month(), firstDayOfTheMonth.day()), wrapper.rows[0].data[0].dateString);
            System.assertEquals(false, wrapper.rows[0].data[0].showControls);
            System.assertEquals('', wrapper.rows[0].data[0].period);
            System.assertEquals(true, wrapper.rows[0].data[0].hasHoliday);//Confirm the holiday is recognised
        }
    }

    //1.4
    @isTest static void testGetMonthInteger(){

        test.startTest();
            system.assertEquals(1, CalendarHelper.getMonthInteger('January'));
            system.assertEquals(2, CalendarHelper.getMonthInteger('February'));
            system.assertEquals(3, CalendarHelper.getMonthInteger('March'));
            system.assertEquals(4, CalendarHelper.getMonthInteger('April'));
            system.assertEquals(5, CalendarHelper.getMonthInteger('May'));
            system.assertEquals(6, CalendarHelper.getMonthInteger('June'));
            system.assertEquals(7, CalendarHelper.getMonthInteger('July'));
            system.assertEquals(8, CalendarHelper.getMonthInteger('August'));
            system.assertEquals(9, CalendarHelper.getMonthInteger('September'));
            system.assertEquals(10, CalendarHelper.getMonthInteger('October'));
            system.assertEquals(11, CalendarHelper.getMonthInteger('November'));
            system.assertEquals(12, CalendarHelper.getMonthInteger('December'));
        test.stopTest();
    }
}